service: serenade-service

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-plugin-warmup
  - serverless-offline

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'

  customDomain:
    certificateName: ${file(./serverless.env.yml):${self:provider.stage}.CERTIFICATE_NAME}
    domainName: ${file(./serverless.env.yml):${self:provider.stage}.DOMAIN_NAME}
    basePath: 'v1'
    stage: ${self:provider.stage}
    createRoute53Record: true

  warmup:
    default: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${file(./serverless.env.yml):${self:provider.stage}.AWS_REGION}
  profile: ${file(./serverless.env.yml):${self:provider.stage}.SERVERLESS_ADMIN}
  timeout: 30
  environment:
    API_URL: ${file(./serverless.env.yml):${self:provider.stage}.API_URL}
    DASHBOARD_URL: ${file(./serverless.env.yml):${self:provider.stage}.DASHBOARD_URL}
    DYNAMO_TEMP_DATECARD_TABLE: ${file(./serverless.env.yml):${self:provider.stage}.DYNAMO_TEMP_DATECARD_TABLE}
    JWT_SECRET: ${file(./serverless.env.yml):${self:provider.stage}.JWT_SECRET}
    POSTGRES_DB_HOST: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_HOST}
    POSTGRES_DB_NAME: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_NAME}
    POSTGRES_DB_PASSWORD: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_PASSWORD}
    POSTGRES_DB_USERNAME: ${file(./serverless.env.yml):${self:provider.stage}.POSTGRES_DB_USERNAME}
    REGION: ${self:provider.region}
    SENDGRID_API_KEY: ${file(./serverless.env.yml):${self:provider.stage}.SENDGRID_API_KEY}
    SERENADE_SERVICE_API_KEY: ${file(./serverless.env.yml):${self:provider.stage}.SERENADE_SERVICE_API_KEY}
    SERENADE_SHOPIFY_INSTALL_TOPIC_ARN: ${file(./serverless.env.yml):${self:provider.stage}.SERENADE_SHOPIFY_INSTALL_TOPIC_ARN}
    SHOP_URL: ${file(./serverless.env.yml):${self:provider.stage}.SHOP_URL}
    SHOPIFY_API_KEY: ${file(./serverless.env.yml):${self:provider.stage}.SHOPIFY_API_KEY}
    SHOPIFY_API_SECRET: ${file(./serverless.env.yml):${self:provider.stage}.SHOPIFY_API_SECRET}
    STAGE: ${self:provider.stage}
    STRIPE_SECRET_KEY: ${file(./serverless.env.yml):${self:provider.stage}.STRIPE_SECRET_KEY}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${self:provider.stage}-*
    - Effect: Allow
      Action:
        - sns:Publish
      Resource: "arn:aws:sns:${self:provider.region}:*:*-${self:provider.stage}"

functions:
  ordersWebhook:
    handler: app/functions/shopify/ordersWebhook.main
    events:
      - http:
          path: /shopify/orders
          method: post
          cors: true

  createStripeConnectAccount:
    handler: app/functions/stripe/createStripeConnectAccount.main
    events:
      - http:
          path: /stripe/connect
          method: post
          cors: true
    
  createTempDatecard:
    handler: app/functions/tempDatecards/createTempDatecard.main
    events:
      - http:
          path: /temp-datecards
          method: post
          cors: true

  getTempDatecard:
    handler: app/functions/tempDatecards/getTempDatecard.main
    events:
      - http:
          path: /temp-datecards
          method: get
          cors: true

  updateTempDatecard:
    handler: app/functions/tempDatecards/updateTempDatecard.main
    events:
      - http:
          path: /temp-datecards/{tempDatecardId}
          method: put
          cors: true
        
  # createUser:
  #   handler: app/functions/users/createUser.main
  #   events:
  #     - http:
  #         path: /users
  #         method: post
  #         cors: true

  # deleteUser:
  #   handler: app/functions/users/deleteUser.main
  #   events:
  #     - http:
  #         path: /users/{userId}
  #         method: delete
  #         cors: true

  # forgotUserPassword:
  #   handler: app/functions/users/forgotUserPassword.main
  #   events:
  #     - http:
  #         path: /users/password/forgot
  #         method: post
  #         cors: true

  # getUser:
  #   handler: app/functions/users/getUser.main
  #   events:
  #     - http:
  #         path: /users/user
  #         method: get
  #         cors: true

  # loginUser:
  #   handler: app/functions/users/loginUser.main
  #   events:
  #     - http:
  #         path: /users/login
  #         method: post
  #         cors: true

  # resetUserPassword:
  #   handler: app/functions/users/resetUserPassword.main
  #   events:
  #     - http:
  #         path: /users/password/reset
  #         method: put
  #         cors: true

  # updateUser:
  #   handler: app/functions/users/updateUser.main
  #   events:
  #     - http:
  #         path: /users/{userId}
  #         method: put
  #         cors: true
